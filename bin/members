#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
# Author: "Chris Ward" <cward@redhat.com>

# PY3 COMPAT
from __future__ import unicode_literals, absolute_import

# TODO #
# Do you need some cashing with max execution around 8 sec?


if __name__ == "__main__":
    from members.utils import config, logr, exclude, parse_cli

    # Load the user config file from their home directory
    args = parse_cli()

    # MOVE TO parse_cli IN SEPARATE BRANCH:COMMIT ###
    if args['debug']:
        # logr = logging.getLogger()  # get root logger
        logr.setLevel(logging.DEBUG)
    elif args['verbose']:
        logr.setLevel(logging.INFO)
    else:
        logr.setLevel(logging.WARN)
    #######################

    output_file = args['output']

    src = args['src']  # what data source are we targetting?

    # load the data source specific config options
    src_config = config[src]

    # FIXME:  for p in plugins: p.extract()
    # add 'activated plugins' to config;
    if src == 'mailman2':
        # MAILMAN 2 list member extraction
        from members import mailman2
        users = mailman2.extract(args, src_config)
    elif src == 'orgchart3':
        from members import orgchart3
        users = orgchart3.extract(args, src_config)
    elif src == 'github_repo':
        from members import github_repo
        users = github_repo.extract(args, src_config)
    else:
        raise RuntimeError("Unknown datasource [{}]".format(src))

    # remove users that match the exclude patterns
    users = exclude(users, args['exclude'])

    output = '\n'.join(users) if users else ''

    if output_file:
        with open(output_file, 'wb') as f:
            f.write(output)
    else:
        print(output)

    logr.info('{} members found for {}'.format(len(users), src))
