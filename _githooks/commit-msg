#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Author: "Chris Ward" <cward@redhat.com>

"""
Git commit-msg hook for stats-report.

FROM: http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks
The commit-msg hook takes one parameter, which again is the path to
a temporary file that contains the commit message written by the
developer. If this script exits non-zero, Git aborts the commit
process, so you can use it to validate your project state or commit
message before allowing a commit to go through.
"""

# PY3 COMPAT
from __future__ import unicode_literals, absolute_import

import logging
import sys

from members.utils import logr

# Turn on DEBUG so we can get a full log on each commit
logr.setLevel(logging.DEBUG)


COMMIT_MSG_SIZE_ERR = """
<<<<| Commit msg summary must be <= 50 chars >>>>|
--------------------------------------------------
This is my commit message summary; Max length >>>|

After a line break (\\n) , the full description of
the commit can be included though. No Problem.

See: http://chris.beams.io/posts/git-commit/
"A diff will tell you what changed, but only
the commit message can properly tell you why."

"""


def main():
    py, msg_pth = sys.argv
    msg_summary = open(msg_pth).readlines()[0]
    k = len(msg_summary)
    x = k - 50 - 1
    if len(msg_summary) > 50:
        logr.error("Commit Message Check: FAIL")
        logr.error("Your commit message:")
        logr.error("\n{0}{1}{2}".format(msg_summary, '^' * 50, 'X' * x))
        logr.error(COMMIT_MSG_SIZE_ERR)
        sys.exit(1)
    else:
        logr.warn("Commit Message Check: PASS")

if __name__ == '__main__':
    main()
    sys.exit(0)

sys.exit(1)
